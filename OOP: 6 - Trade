using System;
using System.Collections.Generic;

namespace Homework_2
{
	internal class Program
	{
		static void Main(string[] args)
		{
			bool isWorking = true;
			Merchant merchant = new Merchant();
			Customer customer = new Customer();

			while (isWorking)
			{
				Console.Clear();
				Console.WriteLine("Вы в магазине. Введите номер команды:");
				Console.WriteLine("1 - Посмотреть товары у продавца\n2 - Посмотреть свою корзину\n3 - Купить товар\n4 - Цены\n5 - Выйти");
				string userInput = Console.ReadLine();

				switch (userInput)
				{
					case "1":
						merchant.ShowInfo();
						break;
					case "2":
						customer.ShowInfo();
						break;
					case "3":
						Trade(customer, merchant);
						break;
					case "4":
						merchant.ShowPrice();
						break;
					case "5":
						isWorking = false;
						break;
				}
			}
		}

		static void Trade(Customer customer, Merchant merchant)
		{
			List<Stack> stacks = merchant.GiveList();
			Console.WriteLine("Какой товар купить?");
			string name = Console.ReadLine();
			Console.WriteLine("Какое количество товара купить?");
			string userInput = Console.ReadLine();
			int quantity = customer.GetIntegerNumber(userInput);

			for (int i = 0; i < stacks.Count; i++)
			{
				if (stacks[i].Product.Name == name && stacks[i].Quantity >= quantity && customer.Money >= stacks[i].Product.Value * quantity)
				{
					merchant.SellProduct(stacks[i], i, quantity);
					customer.TakeProduct(stacks[i], quantity);
					Console.WriteLine("Товар куплен.");
					Console.ReadKey();
				}
				else if (stacks[i].Product.Name == name && stacks[i].Quantity <= quantity && customer.Money >= stacks[i].Product.Value * quantity)
				{
					Console.WriteLine("Нет такого товара или его недостаточно.");
					Console.ReadKey();
				}
				else if (stacks[i].Product.Name == name && stacks[i].Quantity >= quantity && customer.Money <= stacks[i].Product.Value * quantity)
				{
					Console.WriteLine("У Вас недостаточно денег");
					Console.ReadKey();
				}
			}
		}
	}

	class Person
	{
		protected List<Stack> Products = new List<Stack>();

		public Person()
		{

		}

		public int Money { get; protected set; }

		public List<Stack> GiveList()
		{
			List<Stack> products = new List<Stack>();
			int maxQuantity = 0;

			foreach (Stack product in Products)
				maxQuantity += 1;

			products = Products.GetRange(0, maxQuantity);
			return products;
		}

		public void ShowInfo()
		{
			Console.WriteLine($"\n{Money} денег\n");

			for (int i = 0; i < Products.Count; i++)
				Console.WriteLine($"{Products[i].Product.Name} x {Products[i].Quantity}");

			Console.ReadKey();
		}

		public int GetIntegerNumber(string userInput)
		{
			int number;
			bool success = int.TryParse(userInput, out number);

			if (success == false)
			{
				Console.WriteLine("Ошибка ввода.");
				Console.ReadKey();
			}

			return number;
		}
	}

	class Merchant : Person
	{
		public Merchant()
		{
			Money = 0;
			Products.Add(new Stack("Apple", 5, 20));
			Products.Add(new Stack("Book", 150, 3));
			Products.Add(new Stack("Chair", 700));
			Products.Add(new Stack("Pen", 12, 98));
			Products.Add(new Stack("Sword", 999, 1));
			Products.Add(new Stack("Shield", 560, 2));
		}

		private void TakeMoney(Product product, int quantity)
		{
			Money += product.Value * quantity;
		}

		public void ShowPrice()
		{
			for (int i = 0; i < Products.Count; i++)
				Console.WriteLine($"{Products[i].Product.Name} -- {Products[i].Product.Value} денег за штуку");

			Console.ReadKey();
		}

		public void SellProduct(Stack stack, int indexOfProduct, int quantity)
		{
			Products[indexOfProduct].RemoveProducts(quantity);
			TakeMoney(stack.Product, quantity);
		}
	}

	class Customer : Person
	{
		public Customer(int money = 1000)
		{
			Money = money;
		}

		private void GiveMoney(Product product, int quantity)
		{
			Money -= quantity * product.Value;
		}

		public void TakeProduct(Stack stack, int quantity)
		{
			for (int i = 0; i < Products.Count; i++)
			{
				if (stack.Product.Name == Products[i].Product.Name)
				{
					quantity += Products[i].Quantity;
					Products.RemoveAt(i);
				}
			}

			Products.Add(new Stack(stack.Product.Name, stack.Product.Value, quantity));
			GiveMoney(stack.Product, quantity);
		}
	}

	class Product
	{
		public Product(string name, int value)
		{
			Name = name;
			Value = value;
		}

		public string Name { get; private set; }

		public int Value { get; private set; }
	}

	class Stack
    {
		public Stack(string name, int value, int quantity = 1)
        {
			Product = new Product(name, value);
			Quantity = quantity;
        }

		public Product Product { get; private set; }

		public int Quantity { get; private set; }

		public void RemoveProducts(int quantity)
        {
			Quantity -= quantity;
        }

		public void AddProducts(int quantity)
		{
			Quantity += quantity;
		}
	}
}
