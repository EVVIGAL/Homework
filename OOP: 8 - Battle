using System;
using System.Collections.Generic;

namespace Homework_2
{
	internal class Program
	{
		static void Main(string[] args)
		{
			Battleground battleground = new Battleground();
			bool isFighting = true;
			battleground.ChooseFirstWarrior();
			battleground.ChooseSecondWarrior();
			Console.WriteLine("Отлично, можем начинать бой!");
			Console.ReadKey();

			while (isFighting)
			{
				while (battleground.FirstWarrior.Health > 0 && battleground.SecondWarrior.Health > 0)
				{
					Battle(battleground);
				}

				Console.ReadKey();
				isFighting = false;
			}

			battleground.ShowWinner();
		}

		static void Battle(Battleground battleground)
		{
			float damage;
			battleground.ShowBattleInfo();
			damage = battleground.FirstWarrior.Attack();
			battleground.SecondWarrior.TakeDamage(damage);
			Console.ReadKey();
			battleground.ShowBattleInfo();
			damage = battleground.SecondWarrior.Attack();
			battleground.FirstWarrior.TakeDamage(damage);
			Console.ReadKey();
		}
	}

	class Battleground
	{
		private List<Warrior> _warriors = new List<Warrior>();

		public Battleground()
		{
			_warriors.Add(new Knight());
			_warriors.Add(new Sorcerer());
			_warriors.Add(new Spearman());
			_warriors.Add(new Barbarian());
			_warriors.Add(new Priest());
		}

		public Warrior FirstWarrior { get; private set; }

		public Warrior SecondWarrior { get; private set; }

		public void ShowWinner()
		{
			if (FirstWarrior.Health < 0)
				Console.WriteLine($"{SecondWarrior.Name} победил!");
			else if (SecondWarrior.Health < 0)
				Console.WriteLine($"{FirstWarrior.Name} победил!");
		}

		public void ChooseFirstWarrior()
		{
			Console.WriteLine("Выберите первого бойца!");
			int userInput = GetUserChoice();

			switch (_warriors[userInput - 1].Name)
			{
				case "Рыцарь":
					FirstWarrior = new Knight();
					break;
				case "Маг":
					FirstWarrior = new Sorcerer();
					break;
				case "Копейщик":
					FirstWarrior = new Spearman();
					break;
				case "Варвар":
					FirstWarrior = new Barbarian();
					break;
				case "Жрец":
					FirstWarrior = new Priest();
					break;
				default:
					Console.WriteLine("Ошибка ввода. Повторите выбор.");
					break;
			}
		}

		public void ChooseSecondWarrior()
		{
			Console.WriteLine("Выберите второго бойца!");
			int userInput = GetUserChoice();

			switch (_warriors[userInput - 1].Name)
			{
				case "Рыцарь":
					SecondWarrior = new Knight();
					break;
				case "Маг":
					SecondWarrior = new Sorcerer();
					break;
				case "Копейщик":
					SecondWarrior = new Spearman();
					break;
				case "Варвар":
					SecondWarrior = new Barbarian();
					break;
				case "Жрец":
					SecondWarrior = new Priest();
					break;
				default:
					Console.WriteLine("Ошибка ввода. Повторите выбор.");
					break;
			}
		}

		public void ShowBattleInfo()
		{
			Console.Clear();
			Console.WriteLine($"{FirstWarrior.Name} -- {FirstWarrior.ShowInformation()}\n\n{SecondWarrior.Name} -- {SecondWarrior.ShowInformation()}\n");
			Console.WriteLine($"{FirstWarrior.Name} -- {FirstWarrior.Health}\n     VS\n{SecondWarrior.Name} -- {SecondWarrior.Health}\n");

		}

		private int GetUserChoice()
		{
			foreach (Warrior fighter in _warriors)
				Console.WriteLine($"{_warriors.IndexOf(fighter) + 1} -- {fighter.Name}");

			int userInput = GetIntegerNumber(Console.ReadLine());
			return userInput;
		}

		static private int GetIntegerNumber(string userInput)
		{
			bool success = int.TryParse(userInput, out int number);

			if (success == false)
			{
				Console.WriteLine("Ошибка ввода.");
				Console.ReadKey();
			}

			return number;
		}
	}

	abstract class Warrior
	{
		protected float MaxHealth = 3000f;
		protected float AttackPower;
		protected float Armor;
		protected int CritChance = 15;
		protected float CritDamage = 1.5f;

		public Warrior()
		{

		}

		public float Health { get; protected set; }

		public string Name { get; private set; }

		private float GetRandomFloatNumber(int minimumDamageDecreaseInPercent, int maximumDamageIncreaseInPercent)
		{
			int oneHundredPercent = 100;
			Random random = new Random();
			float randomFloatNumber = (float)random.Next(minimumDamageDecreaseInPercent, maximumDamageIncreaseInPercent + 1) / oneHundredPercent;
			return randomFloatNumber;
		}

		private int GetRandomNumber(int minimumNumber, int maximumNumber)
		{
			int randomNumber;
			Random random = new Random();
			randomNumber = random.Next(minimumNumber, maximumNumber + 1);
			return randomNumber;
		}

		public void SetName(string name)
		{
			Name = name;
		}

		public float DealDamage()
		{
			int minimumRangeOfAttackInPercent = 75;
			int maximumRangeOfAttackInPercent = 125;
			float attackRange = GetRandomFloatNumber(minimumRangeOfAttackInPercent, maximumRangeOfAttackInPercent);
			float damage = AttackPower * attackRange;
			int oneHundredPercent = 100;

			if (GetRandomNumber(0, oneHundredPercent) < CritChance)
			{
				damage *= CritDamage;
				Console.WriteLine("Критический урон!");
			}

			damage = (int)Math.Round(damage);
			return damage;
		}

		public virtual float Attack()
		{
			return DealDamage();
		}

		public void TakeDamage(float damage)
		{
			damage *= (damage / Armor);
			damage = (int)Math.Round(damage);
			Health -= damage;
		}

		public virtual string ShowInformation()
		{
			string info = "Информация о бойце";
			return info;
		}
	}

	class Knight : Warrior
	{
		private int _maxSpecialSkillCooldown;
		private int _specialSkillCooldown;
		private int _specialSkillIncreaseArmor;
		private int _skillArmorCountdown;
		private int _increasedArmorCountdown;
		private bool _armorIsIncreased;
		private int _zero;
		private float _commonArmor;

		public Knight()
		{
			Health = MaxHealth;
			AttackPower = 180f;
			Armor = 300f;
			_maxSpecialSkillCooldown = 3;
			_specialSkillCooldown = _maxSpecialSkillCooldown;
			_specialSkillIncreaseArmor = 100;
			_skillArmorCountdown = 2;
			_increasedArmorCountdown = _skillArmorCountdown;
			_armorIsIncreased = false;
			_zero = 0;
			_commonArmor = 300f;
			SetName("Рыцарь");
		}

		public override float Attack()
		{
			float damage;

			if (_specialSkillCooldown == 0)
			{
				damage = UseSpecialSkill();
			}
			else
			{
				damage = UseCommonAttack();
			}

			CountdownArmorBuff();
			return damage;
		}

		public override string ShowInformation()
		{
			string info = $"У рыцаря показатели атаки {AttackPower} единиц, а брони {Armor}.\nСобравшись с духом укрепляет свою защиту на пару ходов.";
			return info;
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			_specialSkillCooldown--;
			Console.WriteLine($"Рыцарь наносит {damage} урона.");
			return damage;
		}

		private float UseSpecialSkill()
		{
			float damage = DealDamage();
			Armor += _specialSkillIncreaseArmor;
			_specialSkillCooldown = _maxSpecialSkillCooldown;
			_armorIsIncreased = true;
			Console.WriteLine($"Рыцарь наносит {damage} урона и увеличивает защиту на {_specialSkillIncreaseArmor} единиц.");
			return damage;
		}

		private void CountdownArmorBuff()
		{
			if (_armorIsIncreased)
			{
				_increasedArmorCountdown--;

				if (_increasedArmorCountdown <= _zero)
				{
					Armor = _commonArmor;
					_armorIsIncreased = false;
					_increasedArmorCountdown = _skillArmorCountdown;
				}
			}
		}
	}

	class Sorcerer : Warrior
	{
		private int _mana;
		private int _skillCost;
		private int _manaRegenaration;
		private int _skillDamageMultiplier;

		public Sorcerer()
		{
			Health = MaxHealth;
			AttackPower = 200f;
			Armor = 200f;
			_mana = 125;
			_manaRegenaration = 25;
			_skillCost = 100;
			_skillDamageMultiplier = 2;
			CritChance = 0;
			CritDamage = 0;
			SetName("Маг");
		}

		public override float Attack()
		{
			float damage;

			if (_mana >= _skillCost)
			{
				damage = UseSpecialAttack();
			}
			else
			{
				damage = UseCommonAttack();
			}

			return damage;
		}

		public override string ShowInformation()
		{
			string info = $"У мага показатели атаки {AttackPower} единиц, а брони {Armor}.\nНакопив достаточно маны, может нанести противнику большой урон огненным шаром!";
			return info;
		}

		private float UseSpecialAttack()
		{
			float damage = DealDamage() * _skillDamageMultiplier;
			_mana -= _skillCost;
			Console.WriteLine($"Маг наносит {damage} урона огненным шаром!.");
			return damage;
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			_mana += _manaRegenaration;
			Console.WriteLine($"Маг наносит {damage} урона.");
			return damage;
		}
	}

	class Spearman : Warrior
	{
		private int _maximumCritChance = 50;
		private int _minimumCritChance = 30;
		private int _critChanceIncrease = 5;
		private float _minimumCritDamage = 1.8f;
		private float _critDamageIncrease = 0.1f;
		private float _minimumAttackPower = 120f;
		private float _attackIncrease = 10f;

		public Spearman()
		{
			Health = MaxHealth;
			AttackPower = _minimumAttackPower;
			Armor = 260f;
			CritChance = _minimumCritChance;
			CritDamage = _minimumCritDamage;
			SetName("Копейщик");
		}

		public override string ShowInformation()
		{
			string info = $"У копейщика показатели атаки {AttackPower} единиц, а брони {Armor}.\nС каждой атакой показатели крит шанса, критического урона и атаки немного возрастают.\nДостигнув определенного значения они обнуляются.";
			return info;
		}

		public override float Attack()
		{
			float damage;

			if (CritChance == _maximumCritChance)
			{
				damage = UseResetStatsAttack();
			}
			else
			{
				damage = UseIncreasingStatsAttack();
			}

			return damage;
		}

		private float UseIncreasingStatsAttack()
		{
			float damage = DealDamage();
			CritChance += _critChanceIncrease;
			CritDamage += _critDamageIncrease;
			AttackPower += _attackIncrease;
			Console.WriteLine($"Копейщик наносит {damage} урона.");
			return damage;
		}

		private float UseResetStatsAttack()
		{
			float damage = DealDamage();
			CritChance = _minimumCritChance;
			CritDamage = _minimumCritDamage;
			AttackPower = _minimumAttackPower;
			Console.WriteLine($"Копейщик наносит {damage} урона. Атака вернулась на изначальный уровень.");
			return damage;
		}
	}

	class Barbarian : Warrior
	{
		private float _rageMultiplier;
		private float _partOfHealthForRage;

		public Barbarian()
		{
			Health = MaxHealth;
			AttackPower = 180f;
			Armor = 240f;
			_rageMultiplier = 1.5f;
			_partOfHealthForRage = 0.5f;
			SetName("Варвар");
		}

		public override float Attack()
		{
			float damage;

			if (Health <= MaxHealth * _partOfHealthForRage)
			{
				damage = UseSpecialAttack();
			}
			else
			{
				damage = UseCommonAttack();
			}

			return damage;
		}

		public override string ShowInformation()
		{
			string info = $"У варвара показатели атаки {AttackPower} единиц, а брони {Armor}.\nПотеряв половину ХП варвар впадает в ярость и увеличивает свою атаку в 1.5 раза!";
			return info;
		}

		private float UseSpecialAttack()
		{
			float damage = DealDamage() * _rageMultiplier;
			Console.WriteLine($"Варвар в ярости и наносит {damage} урона.");
			return damage;
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			Console.WriteLine($"Варвар и наносит {damage} урона.");
			return damage;
		}
	}

	class Priest : Warrior
	{
		private int _passiveSkillHeal;
		private int _skillHeal;
		private int _mana;
		private int _skillCost;
		private int _manaRegenaration;
		private int _zeroDamage;

		public Priest()
		{
			Health = MaxHealth;
			AttackPower = 130f;
			Armor = 180f;
			_passiveSkillHeal = 100;
			_mana = 0;
			_manaRegenaration = 25;
			_skillCost = 100;
			_skillHeal = 500;
			_zeroDamage = 0;
			SetName("Жрец");
		}

		public override float Attack()
		{
			float damage;

			if (_mana >= _skillCost && Health < MaxHealth - _skillHeal)
			{
				damage = UseSpecialAttack();
			}
			else
			{
				damage = UseCommonAttack();
			}

			return damage;
		}

		public override string ShowInformation()
		{
			string info = $"У жреца показатели атаки {AttackPower} единиц, а брони {Armor}.\nОбычными атаками лечит себя. Так же, накопив достаточно маны, может восполнить разом 500 единиц здоровья!";
			return info;
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			Health += _passiveSkillHeal;

			if (Health > MaxHealth)
				Health = MaxHealth;

			_mana += _manaRegenaration;
			Console.WriteLine($"Жрец наносит {damage} урона и лечится на {_passiveSkillHeal} единиц здоровья.");
			return damage;
		}

		private float UseSpecialAttack()
		{
			float damage = _zeroDamage;
			Health += _skillHeal;
			_mana -= _skillCost;
			Console.WriteLine($"Жрец восстанавливает {_skillHeal} единиц здоровья.");
			return damage;
		}
	}
}
