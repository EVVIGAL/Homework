using System;
using System.Collections.Generic;

namespace Homework_2
{
	internal class Program
	{
		static void Main(string[] args)
		{
			Battleground battleground = new Battleground();
			bool isFighting = true;
			battleground.SetFighters();
			Console.WriteLine("Отлично, можем начинать бой!");
			Console.ReadKey();

			while (isFighting)
			{
				while (battleground.FirstWarrior.Health > 0 && battleground.SecondWarrior.Health > 0)
				{
					battleground.Battle();
				}

				Console.ReadKey();
				isFighting = false;
			}

			battleground.ShowResultOfBattle();
		}
	}

	class Battleground
	{
		private List<Warrior> _warriors = new List<Warrior>();

		public Battleground()
		{
			_warriors.Add(new Knight());
			_warriors.Add(new Sorcerer());
			_warriors.Add(new Spearman());
			_warriors.Add(new Barbarian());
			_warriors.Add(new Priest());
		}

		public Warrior FirstWarrior { get; private set; }

		public Warrior SecondWarrior { get; private set; }

		public void Battle()
		{
			ShowBattleInfo();
			FirstWarrior.Attack(SecondWarrior);
			Console.ReadKey();
			ShowBattleInfo();
			SecondWarrior.Attack(FirstWarrior);
			Console.ReadKey();
		}

		public void ShowResultOfBattle()
		{
			if (FirstWarrior.Health <= 0 && SecondWarrior.Health > 0)
				Console.WriteLine($"{SecondWarrior.Name} победил!");
			else if (SecondWarrior.Health <= 0 && FirstWarrior.Health > 0)
				Console.WriteLine($"{FirstWarrior.Name} победил!");
			else if (SecondWarrior.Health == 0 && FirstWarrior.Health == 0)
				Console.WriteLine("Ничья!");
		}

		public void SetFighters()
		{
			Console.WriteLine("Кто будет первым бойцом?");
			FirstWarrior = ChooseWarrior();
			Console.WriteLine("А ему противостоит?");
			SecondWarrior = ChooseWarrior();
		}

		public Warrior ChooseWarrior()
		{
			Console.WriteLine("Выберите бойца!");
			bool isChoosing = true;
			Warrior warrior = null;

			while (isChoosing)
			{
				int userInput = GetUserChoice();

				if (userInput <= _warriors.Count)
				{
					switch (_warriors[userInput - 1].Name)
					{
						case "Рыцарь":
							warrior = new Knight();
							isChoosing = false;
							break;
						case "Маг":
							warrior = new Sorcerer();
							isChoosing = false;
							break;
						case "Копейщик":
							warrior = new Spearman();
							isChoosing = false;
							break;
						case "Варвар":
							warrior = new Barbarian();
							isChoosing = false;
							break;
						case "Жрец":
							warrior = new Priest();
							isChoosing = false;
							break;
					}
				}
				else
				{
					Console.Clear();
					Console.WriteLine("Ошибка ввода. Повторите выбор!");
				}
			}

			return warrior;
		}

		public void ShowBattleInfo()
		{
			Console.Clear();
			FirstWarrior.ShowInformation();
			SecondWarrior.ShowInformation();
			Console.WriteLine($"{FirstWarrior.Name} -- {FirstWarrior.Health}\n     VS\n{SecondWarrior.Name} -- {SecondWarrior.Health}\n");
		}

		static private int GetIntegerNumber()
		{
			bool success = false;
			int number = 0;

			while (success == false)
			{
				string userInput = Console.ReadLine();
				success = int.TryParse(userInput, out number);

				if (success == false)
					Console.WriteLine("Ошибка ввода. Введите число!");
			}

			return number;
		}

		private int GetUserChoice()
		{
			foreach (Warrior fighter in _warriors)
				Console.WriteLine($"{_warriors.IndexOf(fighter) + 1} -- {fighter.Name}");

			int userInput = GetIntegerNumber();
			return userInput;
		}
	}

	abstract class Warrior
	{
		protected float MaxHealth = 3000f;
		protected float AttackPower;
		protected float Armor;
		protected float MaxArmor = 800f;
		protected int CritChance = 15;
		protected float CritDamage = 1.5f;
		protected string Description;

		public float Health { get; protected set; }

		public string Name { get; protected set; }

		public float DealDamage()
		{
			int minimumRangeOfAttackInPercent = 75;
			int maximumRangeOfAttackInPercent = 125;
			float attackRange = GetRandomFloatNumber(minimumRangeOfAttackInPercent, maximumRangeOfAttackInPercent);
			float damage = AttackPower * attackRange;
			int oneHundredPercent = 100;

			if (GetRandomNumber(0, oneHundredPercent) < CritChance)
			{
				damage *= CritDamage;
				Console.WriteLine("Критический урон!");
			}

			damage = (int)Math.Round(damage);
			return damage;
		}

		public virtual void Attack(Warrior warrior)
		{
			float damage = DealDamage();
			warrior.TakeDamage(damage);
		}

		public void TakeDamage(float damage)
		{
			damage -= Armor / MaxArmor * damage;
			damage = (int)Math.Round(damage);
			Health -= damage;
		}

		public void ShowInformation()
		{
			Console.WriteLine($"{Name} -- {Description}\n");
		}

		private float GetRandomFloatNumber(int minimumDamageDecreaseInPercent, int maximumDamageIncreaseInPercent)
		{
			int oneHundredPercent = 100;
			Random random = new Random();
			float randomFloatNumber = (float)random.Next(minimumDamageDecreaseInPercent, maximumDamageIncreaseInPercent + 1) / oneHundredPercent;
			return randomFloatNumber;
		}

		private int GetRandomNumber(int minimumNumber, int maximumNumber)
		{
			int randomNumber;
			Random random = new Random();
			randomNumber = random.Next(minimumNumber, maximumNumber + 1);
			return randomNumber;
		}
	}

	class Knight : Warrior
	{
		private int _maxSpecialSkillCooldown;
		private int _specialSkillCooldown;
		private int _specialSkillIncreaseArmor;
		private int _skillArmorCountdown;
		private int _increasedArmorCountdown;
		private bool _armorIsIncreased;
		private int _zero;
		private float _commonArmor;

		public Knight()
		{
			Health = MaxHealth;
			AttackPower = 180f;
			Armor = 300f;
			_maxSpecialSkillCooldown = 3;
			_specialSkillCooldown = _maxSpecialSkillCooldown;
			_specialSkillIncreaseArmor = 100;
			_skillArmorCountdown = 2;
			_increasedArmorCountdown = _skillArmorCountdown;
			_armorIsIncreased = false;
			_zero = 0;
			_commonArmor = 300f;
			Name = "Рыцарь";
			Description = $"У рыцаря стартовые показатели атаки {AttackPower} единиц, а брони {Armor}.\nСобравшись с духом укрепляет свою защиту на пару ходов.";
		}

		public override void Attack(Warrior warrior)
		{
			float damage;

			if (_specialSkillCooldown == 0)
			{
				damage = UseSpecialSkill();
			}
			else
			{
				damage = UseCommonAttack();
			}

			CountdownArmorBuff();
			warrior.TakeDamage(damage);
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			_specialSkillCooldown--;
			Console.WriteLine($"Рыцарь наносит {damage} урона.");
			return damage;
		}

		private float UseSpecialSkill()
		{
			float damage = DealDamage();
			Armor += _specialSkillIncreaseArmor;
			_specialSkillCooldown = _maxSpecialSkillCooldown;
			_armorIsIncreased = true;
			Console.WriteLine($"Рыцарь наносит {damage} урона и увеличивает защиту на {_specialSkillIncreaseArmor} единиц.");
			return damage;
		}

		private void CountdownArmorBuff()
		{
			if (_armorIsIncreased)
			{
				_increasedArmorCountdown--;

				if (_increasedArmorCountdown <= _zero)
				{
					Armor = _commonArmor;
					_armorIsIncreased = false;
					_increasedArmorCountdown = _skillArmorCountdown;
				}
			}
		}
	}

	class Sorcerer : Warrior
	{
		private int _mana;
		private int _skillCost;
		private int _manaRegenaration;
		private int _skillDamageMultiplier;

		public Sorcerer()
		{
			Health = MaxHealth;
			AttackPower = 200f;
			Armor = 200f;
			_mana = 125;
			_manaRegenaration = 25;
			_skillCost = 100;
			_skillDamageMultiplier = 2;
			CritChance = 0;
			CritDamage = 0;
			Name = "Маг";
			Description = $"У мага стартовые показатели атаки {AttackPower} единиц, а брони {Armor}.\nНакопив достаточно маны, может нанести противнику большой урон огненным шаром!";
		}

		public override void Attack(Warrior warrior)
		{
			float damage;

			if (_mana >= _skillCost)
			{
				damage = UseSpecialAttack();
			}
			else
			{
				damage = UseCommonAttack();
			}

			warrior.TakeDamage(damage);
		}

		private float UseSpecialAttack()
		{
			float damage = DealDamage() * _skillDamageMultiplier;
			_mana -= _skillCost;
			Console.WriteLine($"Маг наносит {damage} урона огненным шаром!.");
			return damage;
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			_mana += _manaRegenaration;
			Console.WriteLine($"Маг наносит {damage} урона.");
			return damage;
		}
	}

	class Spearman : Warrior
	{
		private int _maximumCritChance = 50;
		private int _minimumCritChance = 30;
		private int _critChanceIncrease = 5;
		private float _minimumCritDamage = 1.8f;
		private float _critDamageIncrease = 0.1f;
		private float _minimumAttackPower = 120f;
		private float _attackIncrease = 10f;

		public Spearman()
		{
			Health = MaxHealth;
			AttackPower = _minimumAttackPower;
			Armor = 260f;
			CritChance = _minimumCritChance;
			CritDamage = _minimumCritDamage;
			Name = "Копейщик";
			Description = $"У копейщика стартовые показатели атаки {AttackPower} единиц, а брони {Armor}.\nС каждой атакой показатели крит шанса, критического урона и атаки немного возрастают.\nДостигнув определенного значения они обнуляются.";
		}

		public override void Attack(Warrior warrior)
		{
			float damage;

			if (CritChance == _maximumCritChance)
			{
				damage = UseResetStatsAttack();
			}
			else
			{
				damage = UseIncreasingStatsAttack();
			}

			warrior.TakeDamage(damage);
		}

		private float UseIncreasingStatsAttack()
		{
			float damage = DealDamage();
			CritChance += _critChanceIncrease;
			CritDamage += _critDamageIncrease;
			AttackPower += _attackIncrease;
			Console.WriteLine($"Копейщик наносит {damage} урона.");
			return damage;
		}

		private float UseResetStatsAttack()
		{
			float damage = DealDamage();
			CritChance = _minimumCritChance;
			CritDamage = _minimumCritDamage;
			AttackPower = _minimumAttackPower;
			Console.WriteLine($"Копейщик наносит {damage} урона. Атака вернулась на изначальный уровень.");
			return damage;
		}
	}

	class Barbarian : Warrior
	{
		private float _rageMultiplier;
		private float _partOfHealthForRage;

		public Barbarian()
		{
			Health = MaxHealth;
			AttackPower = 180f;
			Armor = 240f;
			_rageMultiplier = 1.5f;
			_partOfHealthForRage = 0.5f;
			Name = "Варвар";
			Description = $"У варвара стартовые показатели атаки {AttackPower} единиц, а брони {Armor}.\nПотеряв половину ХП варвар впадает в ярость и увеличивает свою атаку в 1.5 раза!";
		}

		public override void Attack(Warrior warrior)
		{
			float damage;

			if (Health <= MaxHealth * _partOfHealthForRage)
			{
				damage = UseSpecialAttack();
			}
			else
			{
				damage = UseCommonAttack();
			}

			warrior.TakeDamage(damage);
		}

		private float UseSpecialAttack()
		{
			float damage = DealDamage() * _rageMultiplier;
			Console.WriteLine($"Варвар в ярости и наносит {damage} урона.");
			return damage;
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			Console.WriteLine($"Варвар и наносит {damage} урона.");
			return damage;
		}
	}

	class Priest : Warrior
	{
		private int _passiveSkillHeal;
		private int _skillHeal;
		private int _mana;
		private int _skillCost;
		private int _manaRegenaration;
		private int _zeroDamage;

		public Priest()
		{
			Health = MaxHealth;
			AttackPower = 130f;
			Armor = 180f;
			_passiveSkillHeal = 100;
			_mana = 0;
			_manaRegenaration = 25;
			_skillCost = 100;
			_skillHeal = 500;
			_zeroDamage = 0;
			Name = "Жрец";
			Description = $"У жреца стартовые показатели атаки {AttackPower} единиц, а брони {Armor}.\nОбычными атаками лечит себя. Так же, накопив достаточно маны, может восполнить разом 500 единиц здоровья!";
		}

		public override void Attack(Warrior warrior)
		{
			float damage;

			if (_mana >= _skillCost && Health < MaxHealth - _skillHeal)
			{
				damage = UseSpecialAttack();
			}
			else
			{
				damage = UseCommonAttack();
			}

			warrior.TakeDamage(damage);
		}

		private float UseCommonAttack()
		{
			float damage = DealDamage();
			Health += _passiveSkillHeal;

			if (Health > MaxHealth)
				Health = MaxHealth;

			_mana += _manaRegenaration;
			Console.WriteLine($"Жрец наносит {damage} урона и лечится на {_passiveSkillHeal} единиц здоровья.");
			return damage;
		}

		private float UseSpecialAttack()
		{
			float damage = _zeroDamage;
			Health += _skillHeal;
			_mana -= _skillCost;
			Console.WriteLine($"Жрец восстанавливает {_skillHeal} единиц здоровья.");
			return damage;
		}
	}
}
