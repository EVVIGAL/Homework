using System;
using System.Collections.Generic;

namespace Homework_2
{
	enum Animals
	{
		Кот,
		Попугай,
		Лось,
		Утка
	}

	internal class Program
	{
		static void Main(string[] args)
		{
			Zoo zoo = new();
			bool isPlaying = true;
			int inputToExit = 5;

			while (isPlaying)
			{
				Console.Clear();
				Console.WriteLine($"Вы в зоопарке. Введите '5', чтобы выйти из зоопарка или введите номер вольера к которому хотите подойти:");
				zoo.ShowCagesName();
				int userInput = GetNumber();

				if (userInput == inputToExit)
					isPlaying = false;
				else
					zoo.ShowCageInfo(userInput);

				Console.ReadKey();
			}
		}

		static private int GetNumber()
		{
			bool success = false;
			int number = 0;

			while (success == false)
			{
				string userInput = Console.ReadLine();
				success = int.TryParse(userInput, out number);

				if (success == false)
					Console.WriteLine("Ошибка ввода. Введите число!");
			}

			return number;
		}
	}

	class Zoo
	{
		private List<Cage> _cages = new();

		public Zoo()
		{
			_cages.Add(new Cage("Маленький вольер", Animals.Кот, 3));
			_cages.Add(new Cage("Маленькая клетка", Animals.Попугай, 1));
			_cages.Add(new Cage("Гигантский загон", Animals.Лось, 2));
			_cages.Add(new Cage("Пруд", Animals.Утка, 5));
		}

		public void ShowCageInfo(int index)
		{
			foreach (Cage cage in _cages)
			{
				if (index == _cages.IndexOf(cage) + 1)
					cage.ShowInfo();
			}
		}

		public void ShowCagesName()
		{
			foreach (Cage cage in _cages)
			{
				Console.WriteLine($"{_cages.IndexOf(cage) + 1} - {cage.Name}");
			}
		}
	}

	class Cage
	{
		private List<Animal> _animals = new();

		public Cage(string name, Animals animal, int amount)
		{
			AddAnimal(animal, amount);
			Name = name;
		}

		public string Name { get; private set; }

		public void ShowInfo()
		{
			Console.WriteLine($"В вольере находятся {_animals.Count} {_animals[_animals.Count - 1].GenitiveName}. Издают звук - {_animals[_animals.Count - 1].Sound}");

			foreach (var animal in _animals)
				Console.WriteLine($"{animal.Name} - пол {animal.Gender}");
		}

		private void AddAnimal(Animals animals, int amount)
		{
			switch (animals)
			{
				case Animals.Кот:
					AddCats(amount);
					break;
				case Animals.Попугай:
					AddParrots(amount);
					break;
				case Animals.Лось:
					AddMoose(amount);
					break;
				case Animals.Утка:
					AddDucks(amount);
					break;
			}
		}

		private void AddCats(int amount)
		{
			for (int i = 0; i < amount; i++)
				_animals.Add(new Cat());
		}

		private void AddParrots(int amount)
		{
			for (int i = 0; i < amount; i++)
				_animals.Add(new Parrot());
		}

		private void AddMoose(int amount)
		{
			for (int i = 0; i < amount; i++)
				_animals.Add(new Moose());
		}

		private void AddDucks(int amount)
		{
			for (int i = 0; i < amount; i++)
				_animals.Add(new Duck());
		}
	}

	abstract class Animal
	{
		protected Random Random = new();

		public Animal()
		{
			SetGender();
		}

		public string Name { get; protected set; }

		public string GenitiveName { get; protected set; }

		public string Sound { get; protected set; }

		public string Gender { get; protected set; }

		protected void SetGender()
		{
			byte maleNumber = 1;
			byte femaleNumber = 0;

			if (Random.Next(femaleNumber, maleNumber + 1) == 1)
				Gender = "Мужской";
			else
				Gender = "Женский";
		}
	}

	class Cat : Animal
	{
		public Cat()
		{
			Name = "Кот";
			GenitiveName = "Котов";
			Sound = "Мяу!";
		}
	}

	class Parrot : Animal
	{
		public Parrot()
		{
			Name = "Попугай";
			GenitiveName = "Попугаев";
			Sound = "Чего надо!?";
		}
	}

	class Moose : Animal
	{
		public Moose()
		{
			Name = "Лось";
			GenitiveName = "Лосей";
			Sound = "Ууу-ааа!";
		}
	}

	class Duck : Animal
	{
		public Duck()
		{
			Name = "Утка";
			GenitiveName = "Уток";
			Sound = "Кря!";
		}
	}
}
