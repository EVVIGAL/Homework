using System;
using System.Collections.Generic;

namespace Homework_2
{
	internal class Program
	{
		static void Main(string[] args)
		{
			Station station = new Station();
			bool isOpen = true;

			while (isOpen)
			{
				Console.Clear();
				Console.WriteLine($"Баланс: {station.Money}уе");
				Car car = null;
				Console.WriteLine("Выберите действие:\n1 - Запустить очередного клиента\n2 - Проверить склад\n3 - Закрыться");
				int userInput = GetNumber();

				switch (userInput)
				{
					case 1:
						car = new Car();
						break;
					case 2:
						station.ShowWarehouseInfo();
						break;
					case 3:
						isOpen = false;
						break;
				}

				if (car != null)
				{
					ServeTheCar(station, car);
				}
			}
		}

		static void ServeTheCar(Station station, Car car)
		{

			Console.WriteLine("\nМашина заехала.\n");
			car.ShowInfo();
			Console.WriteLine("\nВыберите действие:\n1 - Заменить запчасть\n2 - Отказать в ремонте(будет выплачен штраф)");
			int userInput = GetNumber();

			switch (userInput)
			{
				case 1:
					station.FixCar(car);
					break;
				case 2:
					station.DenyCar();
					break;
				default:
					Console.Write("Вы даже по цифрам попасть не можете.");
					station.DenyCar();
					break;
			}
		}

		static int GetNumber()
		{
			bool success = false;
			int number = 0;

			while (success == false)
			{
				string userInput = Console.ReadLine();
				success = int.TryParse(userInput, out number);

				if (success == false)
					Console.WriteLine("Ошибка ввода. Введите число!");
			}

			return number;
		}
	}

	class Station
	{
		private Warehouse _warehouse = new();
		private int _penalty = 200;

		public Station(int money = 1000)
		{
			Money = money;
		}

		public int Money { get; private set; }

		public Car FixCar(Car car)
		{
			if (_warehouse.HasPart(car.BrokenPart))
			{
				_warehouse.RemovePart(car.BrokenPart);
				Console.WriteLine($"{car.BrokenPart.Name} успешно заменён.");
				Money += (car.BrokenPart.PriceToFix + car.BrokenPart.PriceToSell);
				Console.ReadKey();
			}
			else
			{
				Console.WriteLine($"Такой запчасти нет. Отпустите машину с богом и выплатите штраф {_penalty}уе.");
				Money -= _penalty;
				Console.ReadKey();
			}

			return car;
		}

		public void DenyCar()
		{
			Money -= _penalty;
			Console.WriteLine($"Вы заплатили штраф {_penalty}уе. Машина уехала.");
			Console.ReadKey();
		}

		public void ShowWarehouseInfo()
		{
			_warehouse.ShowInfo();
		}
	}

	class Warehouse
	{
		private List<Stack> _parts = new();

		public Warehouse()
		{
			_parts.Add(new Stack(new Radiator(), 2));
			_parts.Add(new Stack(new BreakPads(), 0));
			_parts.Add(new Stack(new Generator(), 3));
			_parts.Add(new Stack(new AirFilter(), 5));
			_parts.Add(new Stack(new Headlight(), 0));
		}

		public void ShowInfo()
		{
			Console.WriteLine("На складе:");

			foreach (Stack stack in _parts)
				Console.WriteLine($"{stack.AutoPart.Name} - {stack.Quantity}");

			Console.ReadKey();
		}

		public bool HasPart(AutoPart part)
		{
			bool hasPart = false;

			foreach (Stack stack in _parts)
			{
				if (stack.AutoPart.Name == part.Name && stack.Quantity > 0)
					hasPart = true;
			}

			return hasPart;
		}

		public void RemovePart(AutoPart part)
		{
			foreach (Stack stack in _parts)
			{
				if (stack.AutoPart.Name == part.Name)
				{
					stack.RemovePart();
					Console.WriteLine("Запчасть выделили со склада");
					Console.ReadKey();
				}
			}
		}
	}

	class Stack
	{
		public Stack(AutoPart part, int quantity)
		{
			AutoPart = part;
			Quantity = quantity;
		}

		public AutoPart AutoPart { get; private set; }

		public int Quantity { get; private set; }

		public void RemovePart()
		{
			Quantity--;
		}
	}

	abstract class AutoPart
	{
		public string Name { get; protected set; }

		public int PriceToSell { get; protected set; }

		public int PriceToFix { get; protected set; }
	}

	class BreakPads : AutoPart
	{
		public BreakPads()
		{
			Name = "Тормозные колодки";
			PriceToSell = 200;
			PriceToFix = 140;
		}
	}

	class Radiator : AutoPart
	{
		public Radiator()
		{
			Name = "Радиатор";
			PriceToSell = 700;
			PriceToFix = 560;
		}
	}

	class Generator : AutoPart
	{
		public Generator()
		{
			Name = "Генератор";
			PriceToSell = 400;
			PriceToFix = 280;
		}
	}

	class AirFilter : AutoPart
	{
		public AirFilter()
		{
			Name = "Воздушный фильтр";
			PriceToSell = 50;
			PriceToFix = 30;
		}
	}

	class Headlight : AutoPart
	{
		public Headlight()
		{
			Name = "Фара";
			PriceToSell = 500;
			PriceToFix = 350;
		}
	}

	class Car
	{
		private Random _random = new();
		private List<AutoPart> _allParts = new();

		public Car()
		{
			_allParts.Add(new BreakPads());
			_allParts.Add(new Radiator());
			_allParts.Add(new Generator());
			_allParts.Add(new AirFilter());
			_allParts.Add(new Headlight());
			GetRandomMalfunction();
		}

		public AutoPart BrokenPart { get; private set; }

		public void ShowInfo()
		{
			Console.WriteLine($"У автомобиля необходимо заменить {BrokenPart.Name}. За запчасть стрясём {BrokenPart.PriceToSell}уе плюс {BrokenPart.PriceToFix}уе за работу.");
		}

		private void GetRandomMalfunction()
		{
			int randomIndex = _random.Next(0, _allParts.Count);
			BrokenPart = _allParts[randomIndex];
		}
	}
}
