using System;
using System.Collections.Generic;

namespace Homework_2
{
	internal class Program
	{
		static void Main(string[] args)
		{
			Battleground battleground = new Battleground(new Platoon("Korea"), new Platoon("Japan"));

			while (battleground.HasBothPlatoons())
			{
				Console.Clear();
				battleground.Battle();
			}

			battleground.ShowBattleResult();

			Console.ReadKey();
		}
	}

	class Battleground
	{
		private Platoon _firstPlatoon;
		private Platoon _secondPlatoon;

		public Battleground(Platoon platoon1, Platoon platoon2)
		{
			_firstPlatoon = platoon1;
			_secondPlatoon = platoon2;
		}

		public void Battle()
		{
			_firstPlatoon.ShowInfo(0, 0);
			_secondPlatoon.ShowInfo(30, 0);
			Console.SetCursorPosition(0, 7);
			_secondPlatoon.TakeDamageByRandomUnit(_firstPlatoon.GetRandomUnitForShoot().DealDamage());

			if (_secondPlatoon.HasSoldiers() == true)
				_firstPlatoon.TakeDamageByRandomUnit(_secondPlatoon.GetRandomUnitForShoot().DealDamage());
		}

		public void ShowBattleResult()
		{
			if (_firstPlatoon.HasSoldiers() == true)
				Console.WriteLine($"Победил первый взвод!");
			else if (_secondPlatoon.HasSoldiers() == true)
				Console.WriteLine($"Победил второй взвод!");
		}

		public bool HasBothPlatoons()
		{
			return _firstPlatoon.HasSoldiers() == true && _secondPlatoon.HasSoldiers() == true;
		}
	}

	class Platoon
	{
		private Random _random = new();
		private List<Unit> _units = new();

		public Platoon(string country)
		{
			Country = country;
			_units.Add(new Infantry());
			_units.Add(new Infantry());
			_units.Add(new Infantry());
			_units.Add(new Sniper());
			_units.Add(new Grenadier());
		}

		public string Country { get; private set; }

		public Unit GetRandomUnitForShoot()
		{
			Unit unit = GetRandomUnit();
			Console.WriteLine($"Стреляет {unit.Name} из {Country}");
			return unit;
		}

		public bool HasSoldiers()
		{
			return _units.Count != 0;
		}

		public void ShowInfo(int xPosition, int yPosition)
		{
			Console.SetCursorPosition(xPosition, yPosition);
			Console.WriteLine(Country);
			yPosition++;

			foreach (Unit unit in _units)
			{
				Console.SetCursorPosition(xPosition, yPosition);
				yPosition++;
				Console.WriteLine(unit.Name + " - " + unit.Health);
			}
		}

		public void TakeDamageByRandomUnit(int damage)
		{
			Unit unit = GetRandomUnit();
			unit.TakeDamage(damage);

			if (unit.Health <= 0)
			{
				_units.Remove(unit);
				Console.WriteLine($"{unit.Name} из {Country} уничтожен");
				Console.ReadKey();
			}
			else
			{
				Console.WriteLine($"{unit.Name} из {Country} получил {damage} урона");
				Console.ReadKey();
			}
		}

		private Unit GetRandomUnit()
		{
			int selectedUnit = _random.Next(0, _units.Count);
			Unit unit = _units[selectedUnit];
			return unit;
		}
	}

	abstract class Unit
	{
		protected int Damage;

		public virtual int DealDamage()
		{
			Console.WriteLine($"{Name} наносит {Damage} урона.");
			Console.ReadKey();
			return Damage;
		}

		public string Name { get; protected set; }

		public int Health { get; protected set; }

		public void TakeDamage(int damage)
		{
			Health -= damage;
		}
	}

	class Infantry : Unit
	{
		public Infantry()
		{
			Name = "Пехотинец";
			Damage = 20;
			Health = 100;
		}
	}

	class Sniper : Unit
	{
		public Sniper()
		{
			Name = "Снайпер";
			Damage = 80;
			Health = 80;
		}
	}

	class Grenadier : Unit
	{
		private Random _random = new();
		private int _minDamageCounter = 1;
		private int _maxDamageCounter = 4;

		public Grenadier()
		{
			Name = "Гренадёр";
			Damage = 30;
			Health = 60;
		}

		public override int DealDamage()
		{
			int damage = Damage * _random.Next(_minDamageCounter, _maxDamageCounter);
			Console.WriteLine($"{Name} наносит {damage} урона.");
			Console.ReadKey();
			return damage;
		}
	}
}
