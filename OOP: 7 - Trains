using System;
using System.Collections.Generic;

namespace Homework_2
{
	internal class Program
	{
		static void Main(string[] args)
		{
			Route route = new Route();
			bool isWorking = true;

			while (isWorking)
			{
				Console.Clear();

				if (route.RouteIsCreated)
				{
					Console.WriteLine($"Маршрут {route.Departure} -- {route.Destination} сформирован.\nБилетов продано - {route.Passengers}");
					route.DisplayWagons();
				}
				else
				{
					Console.WriteLine("Маршрут не создан.\n");
				}

				Console.WriteLine("Вы рулите железнодорожным вокзалом. Выберите команду:");
				Console.WriteLine("1 - Создать маршрут\n2 - Продать билеты\n3 - Сформировать состав поезда\n4 - Отправить поезд\n5 - Выйти");
				string userInput = Console.ReadLine();

				switch (userInput)
				{
					case "1":
						route.GenerateRoute();
						break;
					case "2":
						route.SellTickets();
						break;
					case "3":
						route.CreateTrain();
						break;
					case "4":
						route.SendTrain();
						break;
					case "5":
						isWorking = false;
						break;
				}
			}
		}
	}

	class Route
	{
		private bool _trainIsCreated;
		private Random _random = new Random();
		private int _maxPassengers = 201;
		private List<String> _cities = new List<String>();
		private Train _train = new Train();

		public Route()
		{
			_cities.Add("Красноярск");
			_cities.Add("Абакан");
			_cities.Add("Новосибирск");
			_cities.Add("Иркутск");
			_cities.Add("Тюмень");
			_cities.Add("Томск");
			Destination = "Пункт назначени не выбран";
			Departure = "Пункт отправления не выбран";
			RouteIsCreated = false;
			_trainIsCreated = false;
		}

		public string Destination { get; private set; }

		public string Departure { get; private set; }

		public bool RouteIsCreated { get; private set; }

		public int Passengers { get; private set; }

		public void DisplayWagons()
		{
			Console.WriteLine($"Состав сформирован из вагонов:\n   {_train.ShowQuantityOfWagons("Плацкарт")} - Плацкарт\n   {_train.ShowQuantityOfWagons("Купе")} - Купе\n   {_train.ShowQuantityOfWagons("Бизнес")} - Бизнес\n");
		}

		public void GenerateRoute()
		{
			Random random = new Random();
			int randomIndexOfDeparture = random.Next(0, _cities.Count);
			int randomIndexOfDestination = random.Next(0, _cities.Count);
			Departure = _cities[randomIndexOfDeparture];

			while (randomIndexOfDeparture == randomIndexOfDestination)
			{
				randomIndexOfDestination = random.Next(0, _cities.Count);
			}

			Destination = _cities[randomIndexOfDestination];
			RouteIsCreated = true;
		}

		public void SellTickets()
		{
			if (RouteIsCreated && Passengers == 0)
			{
				Passengers = _random.Next(0, _maxPassengers);
			}
			else if (RouteIsCreated == false)
			{
				Console.WriteLine("Маршрут не создан. Куда билеты продавать?");
				Console.ReadKey();
			}
			else if (RouteIsCreated && Passengers > 0)
			{
				Console.WriteLine("Народ набрали уже.");
				Console.ReadKey();
			}
		}

		public void CreateTrain()
		{
			if (RouteIsCreated && Passengers > 0)
			{
				_train.AddWagons(Passengers);
				_trainIsCreated = true;
			}
			else if (RouteIsCreated == false)
			{
				Console.WriteLine("Маршрут неизвестен. Создайте сперва направление и продайте билеты.");
				Console.ReadKey();
			}
			else if (RouteIsCreated && Passengers == 0)
			{
				Console.WriteLine("Продайте билеты, чтобы определить количество пассажиров.");
				Console.ReadKey();
			}
		}

		public void SendTrain()
		{
			if (RouteIsCreated && Passengers > 0 && _trainIsCreated)
			{
				RouteIsCreated = false;
				_trainIsCreated = false;
				_train = new Train();
				Passengers = 0;
				Console.WriteLine("Поезд успешно умчал.");
				Console.ReadKey();
			}
			else if (RouteIsCreated == false)
			{
				Console.WriteLine("Маршрут не создан");
				Console.ReadKey();
			}
			else if (RouteIsCreated && Passengers == 0)
			{
				Console.WriteLine("Некого отправлять.");
				Console.ReadKey();
			}
			else if (RouteIsCreated && Passengers > 0 && _trainIsCreated == false)
			{
				Console.WriteLine("Нечего отправлять.");
				Console.ReadKey();
			}
		}
	}

	class Train
	{
		private Wagon _wagon;
		private List<Wagon> _wagons = new List<Wagon>();

		public Train()
		{
			_wagon = new Wagon();
		}

		public void AddWagons(int passengers)
		{
			int noPassengers = 0;

			if (passengers == noPassengers)
			{
				Console.WriteLine("Пассажиров не набралось. Вагоны не нужны.");
				Console.ReadKey();
			}

			while (passengers > noPassengers)
			{
				while (passengers > _wagon.MiddleWagonPlaces)
				{
					_wagons.Add(new Wagon("Плацкарт"));
					passengers -= _wagon.BigWagonPlaces;
				}

				while (passengers > _wagon.SmallWagonPlaces)
				{
					_wagons.Add(new Wagon("Купе"));
					passengers -= _wagon.MiddleWagonPlaces;
				}

				while (passengers > noPassengers)
				{
					_wagons.Add(new Wagon("Бизнес"));
					passengers -= _wagon.SmallWagonPlaces;
				}
			}
		}

		public string ShowQuantityOfWagons(string wagonType)
		{
			int wagons = 0;

			for (int i = 0; i < _wagons.Count; i++)
			{
				if (_wagons[i].Type == wagonType)
				{
					wagons++;
				}
			}

			string wagonsText = $"{wagons}";
			return wagonsText;
		}
	}

	class Wagon
	{
		public Wagon(string type = "Локомотив")
		{
			if (type == "Плацкарт")
			{
				Places = BigWagonPlaces;
				Type = "Плацкарт";
			}
			else if (type == "Купе")
			{
				Places = MiddleWagonPlaces;
				Type = "Купе";
			}
			else if (type == "Бизнес")
			{
				Places = BigWagonPlaces;
				Type = "Бизнес";
			}
			else if (type == "Локомотив")
			{
				Places = 0;
				Type = "Локомотив";
			}
		}

		public string Type { get; private set; }

		public int Places { get; private set; }

		public int BigWagonPlaces { get; private set; } = 20;

		public int MiddleWagonPlaces { get; private set; } = 12;

		public int SmallWagonPlaces { get; private set; } = 6;
	}
}
